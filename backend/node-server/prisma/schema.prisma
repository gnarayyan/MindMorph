generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum OAuthProvider {
  GOOGLE
  FACEBOOK
  MICROSOFT
  GITHUB
  TWITTER
}

enum Language {
  English
  Nepali
  Hindi
}

model User {
  id        Int       @id @default(autoincrement())
  fullName  String
  email     String    @unique
  password  String
  role      Role      @default(STUDENT)
  avatar    String?
  birthdate DateTime?
  createdAt DateTime  @default(now())

  // if authenticates using oauth 
  oauthId       String?
  oauthProvider OAuthProvider?
  // Foreign Keys
  socialHandle  SocialHandle?
  course        Course[]
  courseReview  CourseReview[]
  qna           QnA[]
}

model SocialHandle {
  id       Int     @id @default(autoincrement())
  website  String? @unique
  twitter  String? @unique
  youtube  String? @unique
  linkdin  String? @unique
  facebook String? @unique
  user     User    @relation(fields: [userId], references: [id])
  userId   Int     @unique
}

model CourseDomain {
  id               Int              @id @default(autoincrement())
  name             String
  courseCategories CourseCategory[]
}

model CourseCategory {
  id             Int          @id @default(autoincrement())
  name           String
  coursedomain   CourseDomain @relation(fields: [courseDomainId], references: [id])
  courseDomainId Int
  courseId       Course[]
}

model Course {
  id               Int            @id @default(autoincrement())
  title            String
  courseCategory   CourseCategory @relation(fields: [courseCategoryId], references: [id])
  courseCategoryId Int
  description      String         @db.VarChar(1000)
  objective        String         @db.VarChar(1000)
  requirement      String         @db.VarChar(1000)
  syllabus         String         @db.VarChar(10000)
  author           User           @relation(fields: [authorId], references: [id])
  authorId         Int
  language         Language       @default(English)
  price            Float
  discountPercent  Float?
  rating           Float?
  titleVideo       String?
  ratingCount      Int            @default(0)
  enrollCount      Int            @default(0)
  thumbnail        String?
  subtitle         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  courseReview CourseReview[]

  qna QnA[]
}

model CourseReview {
  id             Int      @id @default(autoincrement())
  course         Course   @relation(fields: [courseId], references: [id])
  courseId       Int
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  description    String   @db.VarChar(500)
  rating         Float // No rating for reply
  updatedAt      DateTime @updatedAt
  idCourseReview Int? // If set it is a reply/response
}

model QnA {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  course        Course   @relation(fields: [courseId], references: [id])
  courseId      Int
  title         String // No title for resply
  description   String   @db.VarChar(500)
  updatedAt     DateTime @updatedAt
  responseCount Int      @default(0)
  idQnA         Int? // If set it is response
}
